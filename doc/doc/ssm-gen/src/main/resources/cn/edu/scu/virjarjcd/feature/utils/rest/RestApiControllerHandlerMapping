package cn.edu.scu.virjarjcd.feature.utils.rest;

import java.lang.reflect.Method;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;

import org.springframework.core.annotation.AnnotationUtils;
import org.springframework.web.servlet.mvc.condition.ParamsRequestCondition;
import org.springframework.web.servlet.mvc.condition.PatternsRequestCondition;
import org.springframework.web.servlet.mvc.method.RequestMappingInfo;
import org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;

public class RestApiControllerHandlerMapping extends RequestMappingHandlerMapping {
	private Map<String, String> mappings = new HashMap<String, String>();

	/**
	 * set some custom mapping
	 * @param patternMap
	 */
	public void setMappings(Map<String, String> patternMap) {
		this.mappings = patternMap;
	}

	public RestApiControllerHandlerMapping() {
		// setOrder(Ordered.LOWEST_PRECEDENCE);
	}

	/**
	 * Detects {@code @FrameworkController} annotations in handler beans.
	 * 
	 * @see org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping#isHandler(java.lang.Class)
	 */
	@Override
	protected boolean isHandler(Class<?> beanType) {
		return AnnotationUtils.findAnnotation(beanType, RestApiController.class) != null;
	}

	@Override
	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType) {

		RequestMappingInfo defaultMapping = super.getMappingForMethod(method, handlerType);
		if (defaultMapping == null) {
			return null;
		}

		Set<String> defaultPatterns = defaultMapping.getPatternsCondition().getPatterns();
		String[] patterns = new String[defaultPatterns.size()];

		// replace as custom mapping
		int i = 0;
		for (String pattern : defaultPatterns) {
			patterns[i] = pattern;
			if (mappings.containsKey(pattern)) {
				patterns[i] = mappings.get(pattern);
			}
			i++;
		}
		PatternsRequestCondition patternsInfo = new PatternsRequestCondition(patterns);

		ParamsRequestCondition paramsInfo = defaultMapping.getParamsCondition();

		RequestMappingInfo mapping = new RequestMappingInfo(patternsInfo, defaultMapping.getMethodsCondition(),
				paramsInfo, defaultMapping.getHeadersCondition(), defaultMapping.getConsumesCondition(),
				defaultMapping.getProducesCondition(), defaultMapping.getCustomCondition());
		return mapping;

	}
}
