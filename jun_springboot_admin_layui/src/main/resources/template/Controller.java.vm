package ${package}.controller;

import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import com.baomidou.mybatisplus.core.toolkit.Wrappers;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import org.springframework.stereotype.Controller;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.baomidou.mybatisplus.core.metadata.IPage;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import lombok.extern.slf4j.Slf4j;
import java.util.List;
import com.jun.plugin.system.common.utils.DataResult;
import com.jun.plugin.system.common.aop.annotation.DataScope;

import ${package}.entity.${className}Entity;
import ${package}.mapper.${className}Mapper;
import ${package}.service.${className}Service;



/**
 * ${comments}
 *
 * @author ${author}
 * @email ${email}
 * @date ${datetime}
 */
@Controller
@RequestMapping("/")
@Slf4j
public class ${className}Controller {

    @Autowired
    private ${className}Service ${classname}Service;

    @Autowired
    private ${className}Mapper ${classname}Mapper;


    /**
    * 跳转到页面
    */
    @GetMapping("/index/${classname}")
    public String ${classname}() {
        return "${classNameLower}/list";
        }

    @ApiOperation(value = "新增")
    @PostMapping("${classname}/add")
    @RequiresPermissions("${classname}:add")
    @ResponseBody
    public DataResult add(@RequestBody ${className}Entity ${classname}){
        ${classname}Service.save(${classname});
        return DataResult.success();
    }

    @ApiOperation(value = "删除")
    @DeleteMapping("${classname}/delete")
    @RequiresPermissions("${classname}:delete")
    @ResponseBody
    public DataResult delete(@RequestBody @ApiParam(value = "id集合") List<String> ids){
        ${classname}Service.removeByIds(ids);
        return DataResult.success();
    }

    @ApiOperation(value = "更新")
    @PutMapping("${classname}/update")
    @RequiresPermissions("${classname}:update")
    @ResponseBody
    public DataResult update(@RequestBody ${className}Entity ${classname}){
        ${classname}Service.updateById(${classname});
        return DataResult.success();
    }

    @ApiOperation(value = "查询分页数据")
    @PostMapping("${classname}/listByPage")
    @RequiresPermissions("${classname}:list")
    @ResponseBody
    @DataScope
    public DataResult findListByPage(@RequestBody ${className}Entity ${classname}){
        Page page = new Page(${classname}.getPage(), ${classname}.getLimit());
        LambdaQueryWrapper<${className}Entity> queryWrapper = Wrappers.lambdaQuery();
        //查询条件示例
        //queryWrapper.eq(${className}Entity::getId, ${classname}.getId());
        IPage<${className}Entity> iPage = ${classname}Service.page(page, queryWrapper);
        return DataResult.success(iPage);
    }
    
    @ApiOperation(value = "查询单条数据")
    @PostMapping("${classname}/findOne")
    @ResponseBody
    public DataResult findOne(@RequestBody ${className}Entity ${classname}){
    	LambdaQueryWrapper<${className}Entity> queryWrapper = Wrappers.lambdaQuery();
    	//查询条件示例
    	//queryWrapper.eq(${className}Entity::getId, ${classname}.getId());
    	//${className}Entity one = ${classname}Service.getOne(queryWrapper);
    	${className}Entity one = ${classname}Service.getById(${classname}.getId());
    	return DataResult.success(one);
    }

    @ApiOperation(value = "查询下拉框数据")
    @PostMapping("${classname}/listBySelect")
    @ResponseBody
    public DataResult findListBySelect(@RequestBody ${className}Entity ${classname}){
        Page page = new Page(${classname}.getPage(), ${classname}.getLimit());
        LambdaQueryWrapper<${className}Entity> queryWrapper = Wrappers.lambdaQuery();
        //查询条件示例
        //queryWrapper.eq(${className}Entity::getId, ${classname}.getId());
        IPage<${className}Entity> iPage = ${classname}Service.page(page, queryWrapper);
        log.info("\n this.${classname}Mapper.selectCountUser()="+this.${classname}Mapper.selectCountUser());
        return DataResult.success(iPage);
    }

}
